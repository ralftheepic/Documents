WebApp : app not installed on local device but access on browser through internet, it cannot access device features. You can grant users access to native features like:

	Device location tracking
	Device microphone and cameras
	User contact lists
	Touch gestures, device tilt, and other user interactions
	Device security features like a fingerprint scan or face recognition

Hybrid:  hybrid apps are more like web apps. Hybrid apps lie somewhere between native and web apps.

what is adb?
android device bridge, it is command line tools comes with android sdk
adb devices will give device name

will require udid when working with real device. how to find udid "instruments -s devices"

APK: Used for Android applications.
IPA: Used for iOS applications, distributed mainly through the Apple App Store.
APP: Refers to macOS application bundles rather than a specific file format, used for applications on macOS systems.


Desired capabilities for android device 

 	DesiredCapabilities caps = new DesiredCapabilities();
        
        caps.setCapability("platformName", "Android");
        caps.setCapability("platformVersion", "11");
        caps.setCapability("deviceName", "My Android Device");
        caps.setCapability("appPackage", "com.example.android");
        caps.setCapability("appActivity", "com.example.android.MainActivity");
        caps.setCapability("automationName", "UiAutomator2");
        // Specify the app or app details if necessary
        // caps.setCapability("app", "/path/to/the/app.apk");

Desired capabilitites for ios 

	caps.setCapability("platformName", "iOS");
        caps.setCapability("platformVersion", "14.4");
        caps.setCapability("deviceName", "iPhone 12");
        caps.setCapability("automationName", "XCUITest");
        caps.setCapability("udid", "your_device_udid_here");
        caps.setCapability("xcodeOrgId", "your_xcode_org_id");
        caps.setCapability("xcodeSigningId", "iPhone Developer");
	caps.setCapability("bundleId", "com.example.MyApp");
        // Specify the app or app details if necessary

how to find appPackage name using adb 
adb shell 'dumpsys package your.app.package | grep "package name"'

how to find bundleId 
unzip -c /path/to/YourApp.ipa/YourApp.app/Info.plist | grep CFBundleIdentifier

IOS automation Challenges
	Code Signing and Provisioning Profiles :iOS apps must be signed with proper provisioning profiles to run on devices, which can 					                complicate setup and maintenance of test environments.
	Simulator Limitations :			While iOS simulators are useful for testing, they don't fully replicate real device 							behavior, leading to potential discrepancies between simulator and real-device testing.
	App Review Process :     Changes in app behavior or UI might require resubmission to the App Store, causing delays in testing and 				deployment cycles.

Android Automation Challenges

	Fragmentation: Android's ecosystem is highly fragmented with numerous device manufacturers, OS versions, screen sizes, and 	customizations, leading to compatibility and consistency challenges.
	Permissions and Security: Handling app permissions and interactions with system-level dialogs (e.g., location access, push 	notifications) can be challenging, especially for automated testing.
	Device Connectivity: Connecting to Android devices for automation can sometimes be unreliable due to issues with USB debugging, 	ADB drivers, and device recognition.

Different tools to inspect element on android 

	UIAutomator Viewer
		Inside the Android SDK directory, locate the tools folder.
		Open the tools folder, and you should find the uiautomatorviewer executable or script.
	Appium Desktop
	Selendroid Inspector
		Download selendroid jar and run below command to start server
		java -jar selendroid-standalone-<version>.jar -port <port_number>
		Navigate to http://localhost:4444/
		Look for a link or button to access the Selendroid Inspector. It might be labeled "Inspector" or "UI Elements.
	Hieararchy Viewer
		Inside the Android SDK directory, locate the tools folder.
		Open the tools folder, and you should find the hierarchyviewer executable or script.


Different tools to inspect elements on ios

	Xcode's Accessibility Inspector
		Once Xcode is launched, go to the "Xcode" menu in the menu bar at the top of the screen.
		From the dropdown menu, select "Open Developer Tool" and then choose "Accessibility Inspector."
		In Accessibility Inspector, you'll see a list of running applications on your device or simulator.
	Appium Desktop
	View Hierarchy Debugger
		
	IOS simulator


Activity : screen of the app
	Launch Activity (onCreate())
	Create Activity (OnStart()) , (OnResume())
	Pause Activity (OnPause())
	Resume Activity (OnResume())
	Stop Activity (OnStop())
	Restart Activity (OnRestart())
	Destroy Activity (OnDestroy())

services : long running task that requires no ui 
	UnBound 
	Bound

broadcast recievers: messages that are sent to the phone are called broadcast. so component that listen for this notification are called broadcast recievers

	System announcement(Broadcast recievers)

Content providers : Data sharing link between two apps

ANDROID PERMISSION MODEL
App permission help support user privacy by protecting accesss to the following 
	Restricted data,such as system state and a users contact information 
	Restricted action, such as connecting to a paired device and recording audio
	
Types of permission
install time permission -> two types
	normal permission -> This permission allow access to data and actions that extend beyond your apps sandbox.
						However the data and actions present very little risk to the users privacy and the operations of the apps.
		Examples:
		Access location extra commands
		accesss network state
		access wifi state
		bluetooth
		broadcast sticky
	Signature level permission -> if the app declares a signature permission that another app has defined, and if two apps are signed by the same certificate, then the system grants the permission to the first app at install time. Otherwise, that first app cannot be granted the permission 
	Examples :
	Bind_Accessibility_Service
	Bind_AutoFill_Service
	Bind_Carrier_Service
	Bind_Device_admin
	
		
runtime permission : aka dangerous permissio, give your app additional access to restricted data, and they allow your app to perform restricted actions that more substantially affect the system and other apps

	read contacts
	send sms
	receive sms
	camera
	
special permission : corresponds to particular app operations. only the platform and oems can define special permissions. Additionally, the platform and oems usually define special permission when they want to protect access to particularly powerful actions, such as drawing over other apps

Examples :
	System_Alert window
	write settings
	



android manifest.xml : file which has all permission ,activites, contentproviders,services,intent required for the app to run properly

.dex : dalvik executable contain java byte code

res : a folder which has device configuration , bitmaps and layouts

resource.arsc : file containing binaries of compiled component which might include images,strings or other data used by app

META-INF : folder that contains the manifest information and other metadata about the java package carried by the jar file 

It contains file like manifest.mf, cert.sf and cert.rsa

apktools : helps to build and decompile application
jadx : to view app source code. To open in vm type "jadx-gui"
cat /etc/passwd



1) unzip apkfilename -d	
2) apktool d filename.apk
3) jarsigner
4) keytool
5) hexdump is a utility that displays the contents of binary files in hexadecimal, decimal, octal, or ASCII. It's a utility for inspection 
6) dexdump
7) 010 editor
8)logcat 
9) jadx


install dronzer
install andbug is a reverse engineering debugger for the android dalvik virtual machine employing the java debug wire protocaol 
install jdb
install introspy
substrate,frida and xposed


Coordinating with client 
	setting up working test environment
	restriction on the entrerprice wireless access point 
	Involve in task include monitoring and manipulating apps network traffic inspecting the app data files 
	asking for threat modeling documents
	
Basic Tampering Techniques
	Binary patching
		Patching is the process of changing the compiled app, e.g., changing code in binary executables, modifying Java bytecode,or tampering with resources.
	code injection
		Frida can inject a JavaScript VM into a process on both Android and iOS
		while Cycript injection with Substrate only works on iOS
	Using Disassemblers and Decompilers
		Disassemblers and decompilers allow you to translate an appâ€™s binary code or bytecode back into a more or less understandable format
	obfuscation
	Debugging and Tracing
	
	
impacket location :  /opt/impacket
	



